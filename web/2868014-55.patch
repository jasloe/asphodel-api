diff --git a/core/modules/datetime/src/Plugin/views/filter/Date.php b/core/modules/datetime/src/Plugin/views/filter/Date.php
index 1421520..728f0fb 100644
--- a/core/modules/datetime/src/Plugin/views/filter/Date.php
+++ b/core/modules/datetime/src/Plugin/views/filter/Date.php
@@ -4,6 +4,7 @@
 
 use Drupal\Component\Datetime\DateTimePlus;
 use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItem;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
@@ -57,6 +58,20 @@ class Date extends NumericDate implements ContainerFactoryPluginInterface {
   protected $requestStack;
 
   /**
+   * Mapping of granularity values to their corresponding date formats.
+   *
+   * @var array
+   */
+  protected $dateFormats = [
+    'second' => 'Y-m-d-H-i-s',
+    'minute' => 'Y-m-d H:i',
+    'hour'   => 'Y-m-d H',
+    'day'    => 'Y-m-d',
+    'month'  => 'Y-m',
+    'year'   => 'Y',
+  ];
+
+  /**
    * Constructs a new Date handler.
    *
    * @param array $configuration
@@ -99,6 +114,74 @@ public static function create(ContainerInterface $container, array $configuratio
   }
 
   /**
+   * {@inheritdoc}
+   */
+  public function buildOptionsForm(&$form, FormStateInterface $form_state) {
+    parent::buildOptionsForm($form, $form_state);
+
+    $form['granularity'] = [
+      '#type' => 'radios',
+      '#title' => $this->t('Granularity'),
+      '#options' => [
+        'second' => $this->t('Second'),
+        'minute' => $this->t('Minute'),
+        'hour'   => $this->t('Hour'),
+        'day'    => $this->t('Day'),
+        'month'  => $this->t('Month'),
+        'year'   => $this->t('Year'),
+      ],
+      '#description' => $this->t('The granularity is the smallest unit to use when determining whether two dates are the same; for example, if the granularity is "Year" then all dates in 1999, regardless of when they fall in 1999, will be considered the same date.'),
+      '#default_value' => $this->options['granularity'],
+    ];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function defineOptions() {
+    $options = parent::defineOptions();
+
+    $options['granularity'] = ['default' => 'day'];
+
+    return $options;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function query() {
+    // set the date format based on the granularity
+    if (isset($this->dateFormats[$this->options['granularity']])) {
+      $this->dateFormat = $this->dateFormats[$this->options['granularity']];
+    }
+    parent::query();
+  }
+
+  /**
+   * Use HTML5 input types for date granularity in exposed form.
+   *
+   * @param $form
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   */
+  public function buildExposedForm(&$form, FormStateInterface $form_state) {
+    parent::buildExposedForm($form, $form_state);
+
+    $value = !empty($this->options['expose']['identifier']) ? $this->options['expose']['identifier'] : 'value';
+
+    switch ($this->options['granularity']) {
+      case 'second':
+      case 'minute':
+      case 'hour':
+        $form[$value]['#attributes']['type'] = 'datetime-local';
+        break;
+
+      case 'month':
+        $form[$value]['#attributes']['type'] = 'month';
+        break;
+    }
+  }
+
+  /**
    * Override parent method, which deals with dates as integers.
    */
   protected function opBetween($field) {
diff --git a/core/modules/datetime/tests/src/Kernel/Views/FilterDateTimeTest.php b/core/modules/datetime/tests/src/Kernel/Views/FilterDateTimeTest.php
index 1e6369c..43e2de5 100644
--- a/core/modules/datetime/tests/src/Kernel/Views/FilterDateTimeTest.php
+++ b/core/modules/datetime/tests/src/Kernel/Views/FilterDateTimeTest.php
@@ -185,6 +185,7 @@ protected function _testExact() {
     $view->filter[$field]->operator = '=';
     $view->filter[$field]->value['min'] = '';
     $view->filter[$field]->value['max'] = '';
+    $view->filter[$field]->options['granularity'] = 'second';
     // Use the date from node 3. Use the site timezone (mimics a value entered
     // through the UI).
     $view->filter[$field]->value['value'] = \Drupal::service('date.formatter')->format(static::$date, 'custom', DateTimeItemInterface::DATETIME_STORAGE_FORMAT, static::$timezone);
diff --git a/core/modules/views/config/schema/views.filter.schema.yml b/core/modules/views/config/schema/views.filter.schema.yml
index 9c34696..16e6f58 100644
--- a/core/modules/views/config/schema/views.filter.schema.yml
+++ b/core/modules/views/config/schema/views.filter.schema.yml
@@ -182,6 +182,9 @@ views.filter.date:
     type:
       type: string
       label: 'Type'
+    granularity:
+      type: string
+      label: 'Granularity'
 
 views.filter_value.in_operator:
   type: sequence
